import numpy as np
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Merge
from keras.layers import Conv1D, MaxPooling1D, AveragePooling1D
from random import choice
from matplotlib import pyplot as plt
from sklearn.neighbors import NearestNeighbors
from pprint import pprint

nreps, nepoch = 10, 10

def sort_min_diff(amat):
    mb = NearestNeighbors(len(amat), metric='manhattan').fit(amat)
    v = mb.kneighbors(amat)
    smallest = np.argmin(v[0].sum(axis=1))
    return amat[v[1][smallest]]

def transpose_shape(x):
    n = []
    for i in x: n.append(i.T)
    return np.array(n)

def standardize(y):
    return y.mean(), y.std(), (y-y.mean())/y.std()

def unstandardize(y, mean, std):
    return y*std+mean

a = np.load('theta_sim.npz')
xtrain, xtest, ytest, ytrain = [a[i] for i in ['xtrain', 'xtest', 'ytest', 'ytrain']]

xtest_untransposed, xtrain_untransposed = map(transpose_shape, [xtest, xtrain])
ytest_mean, ytest_std, ytest = standardize(ytest)
ytrain_mean, ytrain_std, ytrain = standardize(ytrain)
print(ytest_mean, ytest_std)

all_out = {'not_transposed':[], 'binary':[], 'neg1_1': [], 'resort':[], 'resort_and_neg1_1':[]}
 
for i in range(nreps):
    model = Sequential()
    model.add(Conv1D(64, kernel_size=2,
                     activation='relu',
                     input_shape=(40, 489)))
    model.add(Conv1D(64, kernel_size=2, activation='relu'))
    model.add(AveragePooling1D(pool_size=2))
    model.add(Dropout(0.25))
    model.add(Flatten())
    model.add(Dense(64, activation='relu', kernel_initializer='normal'))
    model.add(Dropout(0.5))
    model.add(Dense(64, activation='relu', kernel_initializer='normal'))
    model.add(Dropout(0.5))
    model.add(Dense(1, kernel_initializer='normal'))
    model.compile(loss='mean_squared_error', optimizer='adam')
    #model.summary()
    pred = model.predict(xtest_untransposed)
    rmse = np.mean([(iii-jjj)**2 for iii,jjj in zip(unstandardize(ytest, ytest_mean, ytest_std), unstandardize(pred, ytest_mean, ytest_std))])**0.5
    f = [rmse]
    print(i, f[0])
    for j in range(nepoch):    
        model.fit(xtrain_untransposed, ytrain, batch_size=32,
                  epochs=1, verbose=0, validation_data=(xtest_untransposed, ytest))
        pred = model.predict(xtest_untransposed)
        rmse = np.mean([(iii-jjj)**2 for iii,jjj in zip(unstandardize(ytest, ytest_mean, ytest_std), unstandardize(pred, ytest_mean, ytest_std))])**0.5
        print( i,j, rmse)
        f.append(rmse)
    all_out['not_transposed'].append(f)
pprint( all_out )

for i in range(nreps):
    model = Sequential()
    model.add(Conv1D(64, kernel_size=2,
                     activation='relu',
                     input_shape=(489, 40)))
    model.add(Conv1D(64, kernel_size=2, activation='relu'))
    model.add(AveragePooling1D(pool_size=2))
    model.add(Dropout(0.25))
    model.add(Flatten())
    model.add(Dense(64, activation='relu', kernel_initializer='normal'))
    model.add(Dropout(0.5))
    model.add(Dense(64, activation='relu', kernel_initializer='normal'))
    model.add(Dropout(0.5))
    model.add(Dense(1, kernel_initializer='normal'))
    model.compile(loss='mean_squared_error', optimizer='adam')
    #model.summary()
    pred = model.predict(xtest)
    rmse = np.mean([(iii-jjj)**2 for iii,jjj in zip(unstandardize(ytest, ytest_mean, ytest_std), unstandardize(pred, ytest_mean, ytest_std))])**0.5
    f = [rmse]
    print(i, f[0])
    for j in range(nepoch):    
        model.fit(xtrain, ytrain, batch_size=32,
                  epochs=1, verbose=0, validation_data=(xtest, ytest))
        pred = model.predict(xtest)
        rmse = np.mean([(iii-jjj)**2 for iii,jjj in zip(unstandardize(ytest, ytest_mean, ytest_std), unstandardize(pred, ytest_mean, ytest_std))])**0.5
        print( i,j, rmse)
        f.append(rmse)
    all_out['binary'].append(f)
pprint( all_out )

mtrain, mtest = xtrain*2-1, xtest*2-1
for i in range(nreps):
    model = Sequential()
    model.add(Conv1D(64, kernel_size=2,
                     activation='relu',
                     input_shape=(489, 40)))
    model.add(Conv1D(64, kernel_size=2, activation='relu'))
    model.add(AveragePooling1D(pool_size=2))
    model.add(Dropout(0.25))
    model.add(Flatten())
    model.add(Dense(64, activation='relu', kernel_initializer='normal'))
    model.add(Dropout(0.5))
    model.add(Dense(64, activation='relu', kernel_initializer='normal'))
    model.add(Dropout(0.5))
    model.add(Dense(1, kernel_initializer='normal'))
    model.compile(loss='mean_squared_error', optimizer='adam')
    #model.summary()
    pred = model.predict(mtest)
    rmse = np.mean([(iii-jjj)**2 for iii,jjj in zip(unstandardize(ytest, ytest_mean, ytest_std), unstandardize(pred, ytest_mean, ytest_std))])**0.5
    f = [rmse]
    print(i, f[0])
    for j in range(nepoch):    
        model.fit(mtrain, ytrain, batch_size=32,
                  epochs=1, verbose=0, validation_data=(mtest, ytest))
        pred = model.predict(mtest)
        rmse = np.mean([(iii-jjj)**2 for iii,jjj in zip(unstandardize(ytest, ytest_mean, ytest_std), unstandardize(pred, ytest_mean, ytest_std))])**0.5
        print( i,j, rmse)
        f.append(rmse)
    all_out['neg1_1'].append(f)
pprint( all_out )

rtrain = np.array([sort_min_diff(i.T).T for i in xtrain])
rtest = np.array([sort_min_diff(i.T).T for i in xtest])

for i in range(nreps):
    model = Sequential()
    model.add(Conv1D(64, kernel_size=2,
                     activation='relu',
                     input_shape=(489, 40)))
    model.add(Conv1D(64, kernel_size=2, activation='relu'))
    model.add(AveragePooling1D(pool_size=2))
    model.add(Dropout(0.25))
    model.add(Flatten())
    model.add(Dense(64, activation='relu', kernel_initializer='normal'))
    model.add(Dropout(0.5))
    model.add(Dense(64, activation='relu', kernel_initializer='normal'))
    model.add(Dropout(0.5))
    model.add(Dense(1, kernel_initializer='normal'))
    model.compile(loss='mean_squared_error', optimizer='adam')
    #model.summary()
    pred = model.predict(rtest)
    rmse = np.mean([(iii-jjj)**2 for iii,jjj in zip(unstandardize(ytest, ytest_mean, ytest_std), unstandardize(pred, ytest_mean, ytest_std))])**0.5
    f = [rmse]
    print(i, f[0])
    for j in range(nepoch):    
        model.fit(rtrain, ytrain, batch_size=32,
                  epochs=1, verbose=0, validation_data=(rtest, ytest))
        pred = model.predict(rtest)
        rmse = np.mean([(iii-jjj)**2 for iii,jjj in zip(unstandardize(ytest, ytest_mean, ytest_std), unstandardize(pred, ytest_mean, ytest_std))])**0.5
        print( i,j, rmse)
        f.append(rmse)
    all_out['resort'].append(f)
pprint( all_out )

rtrain = rtrain*2-1
rtest = rtest*2-1

for i in range(nreps):
    model = Sequential()
    model.add(Conv1D(64, kernel_size=2,
                     activation='relu',
                     input_shape=(489, 40)))
    model.add(Conv1D(64, kernel_size=2, activation='relu'))
    model.add(AveragePooling1D(pool_size=2))
    model.add(Dropout(0.25))
    model.add(Flatten())
    model.add(Dense(64, activation='relu', kernel_initializer='normal'))
    model.add(Dropout(0.5))
    model.add(Dense(64, activation='relu', kernel_initializer='normal'))
    model.add(Dropout(0.5))
    model.add(Dense(1, kernel_initializer='normal'))
    model.compile(loss='mean_squared_error', optimizer='adam')
    #model.summary()
    pred = model.predict(rtest)
    rmse = np.mean([(iii-jjj)**2 for iii,jjj in zip(unstandardize(ytest, ytest_mean, ytest_std), unstandardize(pred, ytest_mean, ytest_std))])**0.5
    f = [rmse]
    print(i, f[0])
    for j in range(nepoch):    
        model.fit(rtrain, ytrain, batch_size=32,
                  epochs=1, verbose=0, validation_data=(rtest, ytest))
        pred = model.predict(rtest)
        rmse = np.mean([(iii-jjj)**2 for iii,jjj in zip(unstandardize(ytest, ytest_mean, ytest_std), unstandardize(pred, ytest_mean, ytest_std))])**0.5
        print( i,j, rmse)
        f.append(rmse)
    all_out['resort_and_neg1_1'].append(f)
pprint( all_out )


all_out = {'binary': [[11.86139678809576,
             7.2037528006478535,
             6.4323348276849845,
             5.9466479051120089,
             6.1468067842236689,
             5.9503394791383277,
             6.0044996555317791,
             6.2334659841093885,
             6.2402863358556546,
             6.1563299338481308,
             6.2311685294714811],
            [11.713192041363087,
             6.6055207253277448,
             6.7114146799028322,
             6.4043070009831506,
             6.3929331745275277,
             6.1821419993160163,
             6.281198985333881,
             6.1371097355157112,
             6.1945501678674431,
             6.2079736319503027,
             6.3249910859659577],
            [11.751584210025152,
             6.7263702471437119,
             6.1770492304031555,
             6.0215635637835421,
             6.1830622624756408,
             6.2012902916843267,
             6.157480184729935,
             6.2332588286545585,
             6.0597817530848035,
             6.0607706336593967,
             6.1536754511118952],
            [11.735129178493839,
             7.5816991812908228,
             6.2227059055222185,
             6.3558681857231045,
             6.1425290637945338,
             6.1899661919528715,
             6.0337342201091371,
             6.1004498550383879,
             6.2729796056040401,
             6.2709490827690217,
             6.271449399914153],
            [11.872564126197174,
             7.0086692532996899,
             6.0030872032012228,
             6.3220028497097562,
             5.9525899171025891,
             6.1034709373364064,
             6.2102464975279839,
             6.2228334141838948,
             6.0880391283620048,
             6.0715692071093734,
             6.2366706617877075],
            [11.77688056199452,
             6.8233754554619939,
             6.309082616990966,
             5.9995905418554916,
             6.0179327959623103,
             5.9351538590474977,
             6.0221850012035256,
             6.0890290582182454,
             6.1379848560632437,
             6.4200514086034648,
             6.2005911391458088],
            [11.990368474622727,
             6.3874760636629544,
             6.1192222903902573,
             6.2326140629643776,
             6.0876982544999549,
             6.0843530436052538,
             5.9134845325244783,
             6.1130073071608821,
             5.9912535177021935,
             6.2491204215057712,
             6.1845119466938394],
            [11.736058181753693,
             7.1124389753086978,
             6.2928029564791128,
             6.2992871683505349,
             5.967229359837793,
             6.0455999089649772,
             6.0166994398638698,
             6.0167663284177202,
             6.1215396370583255,
             6.1373136099736643,
             6.1477310957565816],
            [11.732162246638312,
             7.1825191322547184,
             6.4551254016801263,
             6.2617845442582052,
             5.8866306189487814,
             6.0800235401500951,
             6.1296583872659722,
             6.1268229982993825,
             6.1998146890818502,
             6.0315937477940054,
             6.1295454325318985],
            [11.799148037429639,
             6.5705052550500733,
             6.0717391567770314,
             6.3228928022442288,
             6.2276927348189242,
             6.2760121536088578,
             6.035280452302068,
             6.3650461914112473,
             6.214350231819167,
             6.2706850695482288,
             6.2124049342536161]],
 'neg1_1': [[11.875226149162382,
             7.2545685678888701,
             7.0175251246085129,
             6.7644067244467374,
             6.373366202638107,
             6.5189604420767369,
             6.7413483735130031,
             6.6300616811239257,
             6.1956182070105816,
             6.5596673574079771,
             6.8897402794418934],
            [11.82462846684437,
             7.6481053218851818,
             7.2420760951686285,
             7.1012651740047845,
             7.1826219010224168,
             7.3227225034177383,
             6.7715516946646446,
             7.0931199924156534,
             7.5125413941117278,
             7.3644846289538588,
             7.3812304542534664],
            [11.62086725094399,
             7.6890812930005552,
             7.61898616584336,
             6.9589627223035295,
             7.1014929370389757,
             7.0771939168410718,
             7.2797781967077624,
             6.9262422514718773,
             6.9658552923250765,
             6.9757728941460764,
             6.9138848405847195],
            [11.583991455117125,
             7.2246774885272504,
             6.8387223680091722,
             6.952238905090721,
             6.978221802781035,
             6.9322919112352821,
             6.6530189373114377,
             6.6955478052656492,
             6.4180873272483252,
             6.4922765181735551,
             6.6175117638414571],
            [15.090733576210404,
             8.1572531598430569,
             7.5685992905521999,
             6.9571335114080313,
             6.8202283227014693,
             7.1446345651872472,
             7.555429731829765,
             7.2038976292175398,
             7.7553279159545774,
             7.2396007802922266,
             7.0817724265825079],
            [12.084475408491571,
             7.4191326656488661,
             7.2098547886207838,
             6.8000183554008924,
             6.6636237193435557,
             6.5750136458686814,
             6.4774721470848302,
             6.8651110186285917,
             7.2023255407250284,
             6.7911816133187104,
             6.5881951965987113],
            [12.301037405041672,
             7.535319008658881,
             7.6533700937236731,
             7.2194078814464699,
             7.2317707161130107,
             6.7651770181326309,
             6.7410665665449292,
             6.6194728611478313,
             7.1984058734653624,
             6.6671783568786909,
             6.7640469232575029],
            [11.838186280801013,
             7.1782363238605766,
             7.67304887356475,
             6.4013414884352562,
             6.3347028288957583,
             6.788578977585229,
             7.0236832657396819,
             6.5169070512512635,
             6.4885922609460209,
             6.2917326193209568,
             6.5554748716974753],
            [11.779184661264958,
             7.4249058367477172,
             7.3307379840551619,
             7.0743247097427577,
             6.9369564358950573,
             7.0432498513994437,
             6.42019074343815,
             6.7673191125578969,
             6.5479846095962815,
             6.5823352234148791,
             7.0118710812143652],
            [11.761885455269942,
             8.0481316335238535,
             6.976950981712621,
             6.840848961061532,
             6.6726199589590909,
             6.7354302165961695,
             6.4532098279647032,
             6.6326500251559457,
             6.5632687073033642,
             6.3860694671876299,
             6.9813223019700485]],
 'not_transposed': [[11.717134654293085,
                     7.3896708285845847,
                     6.9951645635044075,
                     6.7940555731898309,
                     6.8876149356619178,
                     6.9877487329422721,
                     7.2498387285908761,
                     6.7038050308828225,
                     6.6845471289088474,
                     6.7358776283656168,
                     6.9766587339387431],
                    [11.688136445530397,
                     7.3225083940483264,
                     6.7903125871890673,
                     6.7667892194401942,
                     6.5527038118698568,
                     6.581131707819261,
                     6.5596563081725296,
                     6.6773170592949649,
                     6.6930367909937338,
                     6.5653035306236029,
                     6.7024366474394563],
                    [11.830227583101212,
                     7.3783657346533484,
                     6.9728417123444126,
                     6.5340424185299284,
                     6.5073643560997185,
                     6.4468307279101236,
                     6.4910075266431093,
                     6.7282230750987306,
                     6.6087299870880134,
                     6.7529957092985544,
                     6.6652098335494392],
                    [11.794116373441184,
                     7.3518665668387619,
                     6.8535337146206121,
                     6.765659957689711,
                     6.8283593598045833,
                     6.7189756843455068,
                     6.6896484346488059,
                     6.8670641787135143,
                     6.9367177711277321,
                     6.7765934157771266,
                     6.9176933108810337],
                    [11.791487801389293,
                     7.4760101656449196,
                     6.9468016256351914,
                     6.6257306541739345,
                     6.6477764800650636,
                     6.5761942079922235,
                     6.6973630242261386,
                     6.5970508575491404,
                     6.6049351129802698,
                     6.8016197743754967,
                     6.768592941138655],
                    [11.839845038766013,
                     7.3126371973975104,
                     6.7295791294857192,
                     6.7304423946632852,
                     6.6191535920314122,
                     6.5834553703231791,
                     6.5469082123635491,
                     6.7952087464594477,
                     6.8908743953769269,
                     6.7536715659233328,
                     6.4946378451570412],
                    [11.747494694265534,
                     7.6291505117226244,
                     6.7636002468774388,
                     6.7467417447181033,
                     6.6280211271917349,
                     6.846460093223758,
                     6.4694021882127224,
                     6.772358915169729,
                     6.6023806815468085,
                     6.6007303469601943,
                     6.6619745272742357],
                    [11.786122738584746,
                     7.3879224420843714,
                     6.7192195284703526,
                     6.5790826458324236,
                     6.505125812366491,
                     6.4769356209431166,
                     6.6535676378008679,
                     6.8238375054496458,
                     6.690623757060691,
                     6.894612860264159,
                     6.7496682544707456],
                    [11.857417210147739,
                     7.4468799073991123,
                     6.9330606089041424,
                     6.6080722111042318,
                     6.4811029842407217,
                     6.528084749980632,
                     6.4857132231685659,
                     6.4695381016183076,
                     6.556124251244321,
                     6.4290677741853335,
                     6.7299790339830601],
                    [11.845476251176544,
                     7.52229327317451,
                     7.061933646660381,
                     6.7098761575245494,
                     6.6717326307629206,
                     6.6971052834225393,
                     6.6602112351102694,
                     6.7267371674476681,
                     6.7962466596237707,
                     6.6852010893268075,
                     6.8823438781479149]],
 'resort': [[11.658265131400274,
             6.5824890883051417,
             6.2162722151371028,
             6.0007352378500576,
             5.9738057878391322,
             5.9566623861208186,
             5.9906861813027366,
             5.9899605364128403,
             6.0373238926826058,
             5.8973987599440028,
             5.938064387752604],
            [12.016317717149967,
             6.7103312421696941,
             5.8455931668784693,
             5.9014362720648084,
             5.8754327492921812,
             5.8441583011396343,
             5.9509302133408299,
             6.0164363165355397,
             5.9080346050346648,
             5.9409844062522188,
             6.0050155021981935],
            [11.918908466311851,
             6.0446628200751142,
             5.9737451233158456,
             5.7641225785319481,
             5.7812493401604357,
             5.867252192032665,
             6.0298561501623231,
             6.0468380949091838,
             5.8656710964824281,
             6.0544178367368131,
             6.4639993075757554],
            [11.733910766033393,
             6.1833050311624156,
             5.797727784308047,
             5.7096201242193532,
             5.9871217484743608,
             5.8426388586843032,
             5.6815681125056505,
             5.7400067606497371,
             5.8631163185705173,
             5.8323546905664321,
             5.9393002641871737],
            [11.710938802951896,
             6.8564997666661496,
             5.8918109377939976,
             6.0589790738202911,
             6.1107912885418649,
             5.9135100133076834,
             5.8909860191716774,
             5.9629750700293069,
             6.0272469157402853,
             6.1345016583014402,
             6.1094624154551749],
            [11.944709558033685,
             6.1941631160120147,
             5.9448742498215559,
             5.8666198699703109,
             5.8976503769095805,
             5.8254545501043982,
             5.816167515248309,
             5.8707760174753121,
             6.0491090733309383,
             5.9076969049662038,
             6.152884090855121],
            [11.666122714486297,
             6.5481689922358379,
             6.1216870125711926,
             5.8940588052053524,
             5.884243450426462,
             5.842187029870936,
             5.8392006204186924,
             6.0777854530399145,
             5.9309884756333577,
             5.8865217493579403,
             6.199228287937685],
            [11.881117359366131,
             6.7989148115523621,
             5.932682371684078,
             6.3040730343572138,
             5.7262250897145295,
             5.7237533611313562,
             5.780033787823295,
             5.6578555699910638,
             5.7390207706121412,
             5.758756521364945,
             5.7734979566988551],
            [11.676771166006519,
             6.778772138741969,
             6.0234621990009174,
             5.9261874397289178,
             5.6893304247840142,
             5.6987886848316487,
             5.7092957439465071,
             5.7461511750402128,
             5.7348283385815524,
             5.9486534967227893,
             5.8654847702961579],
            [11.710590258152488,
             6.878892108961189,
             6.2282158201403144,
             5.9042768462280204,
             5.8315354255909204,
             5.7726389496585728,
             6.2097108409351351,
             5.9819876189108525,
             5.884469699350837,
             6.3992288959410164,
             6.205942124397164]],
 'resort_and_neg1_1': [[13.561324811376226,
                        8.1904151910007936,
                        7.4987166260365949,
                        7.4493178394530437,
                        7.6430058738589102,
                        7.4361978881672064,
                        7.6782267394911639,
                        7.413333129379672,
                        7.6136986200693615,
                        6.9834131180143899,
                        6.9200310242238583],
                       [12.572316448019459,
                        7.3365991718538952,
                        6.3617044067595891,
                        6.2772367951373766,
                        6.8823818457424659,
                        6.7954397505833715,
                        6.5750156765014811,
                        7.1935529348788627,
                        6.4406543892046901,
                        6.7208804988763031,
                        6.8690090085485753],
                       [11.792370958267163,
                        7.7286528410550845,
                        7.5750952887757919,
                        6.8542870353479834,
                        6.5920358752968848,
                        6.7425957088728481,
                        6.9245793073647715,
                        6.6906126390153213,
                        6.6225083181948925,
                        6.3558294736674492,
                        6.3214452834135493],
                       [12.253042660635741,
                        7.4814939428854474,
                        6.6996737044860648,
                        7.7863086358589433,
                        7.3887591274916922,
                        7.3076588834546454,
                        7.6449566441585821,
                        7.0578257528724917,
                        6.8515583242753806,
                        6.8301331384508783,
                        6.8975308298747215],
                       [12.06593518929169,
                        7.7580322972073095,
                        6.7947733819826546,
                        6.5051609971151887,
                        6.9678407084392786,
                        6.6266405485522446,
                        6.5631408378512424,
                        7.2110628755690485,
                        6.4884194136027,
                        6.3172112437332046,
                        6.3924101409146123],
                       [12.068112663615581,
                        7.0432858683979749,
                        6.4152417603128349,
                        6.5310005979968455,
                        6.2820719470568029,
                        6.1254057457883642,
                        6.9147261996067018,
                        6.5574332886769975,
                        6.5350520552624705,
                        6.4417050155281155,
                        7.1852198425511666],
                       [11.788348015128381,
                        6.873558864402221,
                        7.3637283310889483,
                        7.102906891964583,
                        6.4901470921192344,
                        6.8294712721004478,
                        6.756828809817927,
                        6.5712416782221243,
                        6.7839656613218597,
                        6.6059596117882924,
                        6.8089416730166645],
                       [12.050607145217182,
                        7.5455015208191165,
                        6.9791209964301739,
                        7.1755441492538132,
                        6.8822188884554727,
                        6.979174835048469,
                        7.0926227766294252,
                        7.1507990037199036,
                        7.0577408951426337,
                        6.7501104840314179,
                        7.0154387655369099],
                       [12.619082433167561,
                        7.5225189377104851,
                        6.8609572825345353,
                        7.2868659501019959,
                        7.4562725722298211,
                        7.5848851834322195,
                        7.6951593219208982,
                        7.1177095290851602,
                        7.3406588927518168,
                        7.0298615165516978,
                        6.9750471872353774],
                       [11.928787647177113,
                        7.8911396123185851,
                        7.1924352536487728,
                        6.4695852726317407,
                        6.6384549533366926,
                        6.3673384759707981,
                        6.4762606303104402,
                        6.1985273642693315,
                        6.7122061155405532,
                        6.274097222666593,
                        6.2429076580237295]]}


def rmean(x):
    k = [sum(i)*len(i)**-1 for i in zip(*x)]
    return k

for i,color in zip(['not_transposed', 'binary', 'neg1_1', 'resort', 'resort_and_neg1_1'], ['r', 'b', 'g', 'k', 'magenta']):
    #for j in all_out[i]:
        #plt.plot(range(11), j, color=color, alpha=.05)
        #plt.scatter(range(11), j, color=color, alpha=.3)
    plt.plot(range(11), rmean(all_out[i]), color=color)
plt.show()
